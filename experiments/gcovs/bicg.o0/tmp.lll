; ModuleID = 'bicg.o0.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@stderr = external global %struct._IO_FILE*
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str1 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@polybench_papi_counters_threadid = global i32 0, align 4
@polybench_program_total_flops = global double 0.000000e+00, align 8
@polybench_t_start = common global double 0.000000e+00, align 8
@polybench_t_end = common global double 0.000000e+00, align 8
@polybench_c_start = common global i64 0, align 8
@polybench_c_end = common global i64 0, align 8
@.str3 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
@.str14 = private unnamed_addr constant [22 x i8] c"utilities/polybench.c\00", align 1
@__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
@.str25 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
@.str36 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %A = alloca [4000 x [4000 x double]]*, align 8
  %s = alloca [4000 x double]*, align 8
  %q = alloca [4000 x double]*, align 8
  %p = alloca [4000 x double]*, align 8
  %r = alloca [4000 x double]*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  store i32 4000, i32* %nx, align 4
  store i32 4000, i32* %ny, align 4
  %call = call i8* @polybench_alloc_data(i32 16000000, i32 8)
  %0 = bitcast i8* %call to [4000 x [4000 x double]]*
  store [4000 x [4000 x double]]* %0, [4000 x [4000 x double]]** %A, align 8
  %call1 = call i8* @polybench_alloc_data(i32 4000, i32 8)
  %1 = bitcast i8* %call1 to [4000 x double]*
  store [4000 x double]* %1, [4000 x double]** %s, align 8
  %call2 = call i8* @polybench_alloc_data(i32 4000, i32 8)
  %2 = bitcast i8* %call2 to [4000 x double]*
  store [4000 x double]* %2, [4000 x double]** %q, align 8
  %call3 = call i8* @polybench_alloc_data(i32 4000, i32 8)
  %3 = bitcast i8* %call3 to [4000 x double]*
  store [4000 x double]* %3, [4000 x double]** %p, align 8
  %call4 = call i8* @polybench_alloc_data(i32 4000, i32 8)
  %4 = bitcast i8* %call4 to [4000 x double]*
  store [4000 x double]* %4, [4000 x double]** %r, align 8
  %5 = load i32* %nx, align 4
  %6 = load i32* %ny, align 4
  %7 = load [4000 x [4000 x double]]** %A, align 8
  %arraydecay = getelementptr inbounds [4000 x [4000 x double]]* %7, i32 0, i32 0
  %8 = load [4000 x double]** %r, align 8
  %arraydecay5 = getelementptr inbounds [4000 x double]* %8, i32 0, i32 0
  %9 = load [4000 x double]** %p, align 8
  %arraydecay6 = getelementptr inbounds [4000 x double]* %9, i32 0, i32 0
  call void @init_array(i32 %5, i32 %6, [4000 x double]* %arraydecay, double* %arraydecay5, double* %arraydecay6)
  %10 = load i32* %nx, align 4
  %11 = load i32* %ny, align 4
  %12 = load [4000 x [4000 x double]]** %A, align 8
  %arraydecay7 = getelementptr inbounds [4000 x [4000 x double]]* %12, i32 0, i32 0
  %13 = load [4000 x double]** %s, align 8
  %arraydecay8 = getelementptr inbounds [4000 x double]* %13, i32 0, i32 0
  %14 = load [4000 x double]** %q, align 8
  %arraydecay9 = getelementptr inbounds [4000 x double]* %14, i32 0, i32 0
  %15 = load [4000 x double]** %p, align 8
  %arraydecay10 = getelementptr inbounds [4000 x double]* %15, i32 0, i32 0
  %16 = load [4000 x double]** %r, align 8
  %arraydecay11 = getelementptr inbounds [4000 x double]* %16, i32 0, i32 0
  call void @kernel_bicg(i32 %10, i32 %11, [4000 x double]* %arraydecay7, double* %arraydecay8, double* %arraydecay9, double* %arraydecay10, double* %arraydecay11)
  %17 = load i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %17, 42
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %18 = load i8*** %argv.addr, align 8
  %arrayidx = getelementptr inbounds i8** %18, i64 0
  %19 = load i8** %arrayidx, align 8
  %call12 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([1 x i8]* @.str, i32 0, i32 0)) #5
  %tobool = icmp ne i32 %call12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32* %nx, align 4
  %21 = load i32* %ny, align 4
  %22 = load [4000 x double]** %s, align 8
  %arraydecay13 = getelementptr inbounds [4000 x double]* %22, i32 0, i32 0
  %23 = load [4000 x double]** %q, align 8
  %arraydecay14 = getelementptr inbounds [4000 x double]* %23, i32 0, i32 0
  call void @print_array(i32 %20, i32 %21, double* %arraydecay13, double* %arraydecay14)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %24 = load [4000 x [4000 x double]]** %A, align 8
  %25 = bitcast [4000 x [4000 x double]]* %24 to i8*
  call void @free(i8* %25) #6
  %26 = load [4000 x double]** %s, align 8
  %27 = bitcast [4000 x double]* %26 to i8*
  call void @free(i8* %27) #6
  %28 = load [4000 x double]** %q, align 8
  %29 = bitcast [4000 x double]* %28 to i8*
  call void @free(i8* %29) #6
  %30 = load [4000 x double]** %p, align 8
  %31 = bitcast [4000 x double]* %30 to i8*
  call void @free(i8* %31) #6
  %32 = load [4000 x double]** %r, align 8
  %33 = bitcast [4000 x double]* %32 to i8*
  call void @free(i8* %33) #6
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind
declare void @free(i8*) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %nx, i32 %ny, [4000 x double]* %A, double* %r, double* %p) #0 {
entry:
  %nx.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %A.addr = alloca [4000 x double]*, align 8
  %r.addr = alloca double*, align 8
  %p.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %ny, i32* %ny.addr, align 4
  store [4000 x double]* %A, [4000 x double]** %A.addr, align 8
  store double* %r, double** %r.addr, align 8
  store double* %p, double** %p.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %ny.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %conv = sitofp i32 %2 to double
  %mul = fmul double %conv, 0x400921FB54442D18
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load double** %p.addr, align 8
  %arrayidx = getelementptr inbounds double* %4, i64 %idxprom
  store double %mul, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc24, %for.end
  %6 = load i32* %i, align 4
  %7 = load i32* %nx.addr, align 4
  %cmp2 = icmp slt i32 %6, %7
  br i1 %cmp2, label %for.body4, label %for.end26

for.body4:                                        ; preds = %for.cond1
  %8 = load i32* %i, align 4
  %conv5 = sitofp i32 %8 to double
  %mul6 = fmul double %conv5, 0x400921FB54442D18
  %9 = load i32* %i, align 4
  %idxprom7 = sext i32 %9 to i64
  %10 = load double** %r.addr, align 8
  %arrayidx8 = getelementptr inbounds double* %10, i64 %idxprom7
  store double %mul6, double* %arrayidx8, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc21, %for.body4
  %11 = load i32* %j, align 4
  %12 = load i32* %ny.addr, align 4
  %cmp10 = icmp slt i32 %11, %12
  br i1 %cmp10, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond9
  %13 = load i32* %i, align 4
  %conv13 = sitofp i32 %13 to double
  %14 = load i32* %j, align 4
  %add = add nsw i32 %14, 1
  %conv14 = sitofp i32 %add to double
  %mul15 = fmul double %conv13, %conv14
  %15 = load i32* %nx.addr, align 4
  %conv16 = sitofp i32 %15 to double
  %div = fdiv double %mul15, %conv16
  %16 = load i32* %j, align 4
  %idxprom17 = sext i32 %16 to i64
  %17 = load i32* %i, align 4
  %idxprom18 = sext i32 %17 to i64
  %18 = load [4000 x double]** %A.addr, align 8
  %arrayidx19 = getelementptr inbounds [4000 x double]* %18, i64 %idxprom18
  %arrayidx20 = getelementptr inbounds [4000 x double]* %arrayidx19, i32 0, i64 %idxprom17
  store double %div, double* %arrayidx20, align 8
  br label %for.inc21

for.inc21:                                        ; preds = %for.body12
  %19 = load i32* %j, align 4
  %inc22 = add nsw i32 %19, 1
  store i32 %inc22, i32* %j, align 4
  br label %for.cond9

for.end23:                                        ; preds = %for.cond9
  br label %for.inc24

for.inc24:                                        ; preds = %for.end23
  %20 = load i32* %i, align 4
  %inc25 = add nsw i32 %20, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond1

for.end26:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @kernel_bicg(i32 %nx, i32 %ny, [4000 x double]* %A, double* %s, double* %q, double* %p, double* %r) #0 {
entry:
  %nx.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %A.addr = alloca [4000 x double]*, align 8
  %s.addr = alloca double*, align 8
  %q.addr = alloca double*, align 8
  %p.addr = alloca double*, align 8
  %r.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %ny, i32* %ny.addr, align 4
  store [4000 x double]* %A, [4000 x double]** %A.addr, align 8
  store double* %s, double** %s.addr, align 8
  store double* %q, double** %q.addr, align 8
  store double* %p, double** %p.addr, align 8
  store double* %r, double** %r.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %ny.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load double** %s.addr, align 8
  %arrayidx = getelementptr inbounds double* %3, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc34, %for.end
  %5 = load i32* %i, align 4
  %6 = load i32* %nx.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end36

for.body3:                                        ; preds = %for.cond1
  %7 = load i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double** %q.addr, align 8
  %arrayidx5 = getelementptr inbounds double* %8, i64 %idxprom4
  store double 0.000000e+00, double* %arrayidx5, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc31, %for.body3
  %9 = load i32* %j, align 4
  %10 = load i32* %ny.addr, align 4
  %cmp7 = icmp slt i32 %9, %10
  br i1 %cmp7, label %for.body8, label %for.end33

for.body8:                                        ; preds = %for.cond6
  %11 = load i32* %j, align 4
  %idxprom9 = sext i32 %11 to i64
  %12 = load double** %s.addr, align 8
  %arrayidx10 = getelementptr inbounds double* %12, i64 %idxprom9
  %13 = load double* %arrayidx10, align 8
  %14 = load i32* %i, align 4
  %idxprom11 = sext i32 %14 to i64
  %15 = load double** %r.addr, align 8
  %arrayidx12 = getelementptr inbounds double* %15, i64 %idxprom11
  %16 = load double* %arrayidx12, align 8
  %17 = load i32* %j, align 4
  %idxprom13 = sext i32 %17 to i64
  %18 = load i32* %i, align 4
  %idxprom14 = sext i32 %18 to i64
  %19 = load [4000 x double]** %A.addr, align 8
  %arrayidx15 = getelementptr inbounds [4000 x double]* %19, i64 %idxprom14
  %arrayidx16 = getelementptr inbounds [4000 x double]* %arrayidx15, i32 0, i64 %idxprom13
  %20 = load double* %arrayidx16, align 8
  %mul = fmul double %16, %20
  %add = fadd double %13, %mul
  %21 = load i32* %j, align 4
  %idxprom17 = sext i32 %21 to i64
  %22 = load double** %s.addr, align 8
  %arrayidx18 = getelementptr inbounds double* %22, i64 %idxprom17
  store double %add, double* %arrayidx18, align 8
  %23 = load i32* %i, align 4
  %idxprom19 = sext i32 %23 to i64
  %24 = load double** %q.addr, align 8
  %arrayidx20 = getelementptr inbounds double* %24, i64 %idxprom19
  %25 = load double* %arrayidx20, align 8
  %26 = load i32* %j, align 4
  %idxprom21 = sext i32 %26 to i64
  %27 = load i32* %i, align 4
  %idxprom22 = sext i32 %27 to i64
  %28 = load [4000 x double]** %A.addr, align 8
  %arrayidx23 = getelementptr inbounds [4000 x double]* %28, i64 %idxprom22
  %arrayidx24 = getelementptr inbounds [4000 x double]* %arrayidx23, i32 0, i64 %idxprom21
  %29 = load double* %arrayidx24, align 8
  %30 = load i32* %j, align 4
  %idxprom25 = sext i32 %30 to i64
  %31 = load double** %p.addr, align 8
  %arrayidx26 = getelementptr inbounds double* %31, i64 %idxprom25
  %32 = load double* %arrayidx26, align 8
  %mul27 = fmul double %29, %32
  %add28 = fadd double %25, %mul27
  %33 = load i32* %i, align 4
  %idxprom29 = sext i32 %33 to i64
  %34 = load double** %q.addr, align 8
  %arrayidx30 = getelementptr inbounds double* %34, i64 %idxprom29
  store double %add28, double* %arrayidx30, align 8
  br label %for.inc31

for.inc31:                                        ; preds = %for.body8
  %35 = load i32* %j, align 4
  %inc32 = add nsw i32 %35, 1
  store i32 %inc32, i32* %j, align 4
  br label %for.cond6

for.end33:                                        ; preds = %for.cond6
  br label %for.inc34

for.inc34:                                        ; preds = %for.end33
  %36 = load i32* %i, align 4
  %inc35 = add nsw i32 %36, 1
  store i32 %inc35, i32* %i, align 4
  br label %for.cond1

for.end36:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %nx, i32 %ny, double* %s, double* %q) #0 {
entry:
  %nx.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %s.addr = alloca double*, align 8
  %q.addr = alloca double*, align 8
  %i = alloca i32, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %ny, i32* %ny.addr, align 4
  store double* %s, double** %s.addr, align 8
  store double* %q, double** %q.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %ny.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE** @stderr, align 8
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load double** %s.addr, align 8
  %arrayidx = getelementptr inbounds double* %4, i64 %idxprom
  %5 = load double* %arrayidx, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0), double %5)
  %6 = load i32* %i, align 4
  %rem = srem i32 %6, 20
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc14, %for.end
  %9 = load i32* %i, align 4
  %10 = load i32* %nx.addr, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end16

for.body5:                                        ; preds = %for.cond3
  %11 = load %struct._IO_FILE** @stderr, align 8
  %12 = load i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load double** %q.addr, align 8
  %arrayidx7 = getelementptr inbounds double* %13, i64 %idxprom6
  %14 = load double* %arrayidx7, align 8
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([8 x i8]* @.str1, i32 0, i32 0), double %14)
  %15 = load i32* %i, align 4
  %rem9 = srem i32 %15, 20
  %cmp10 = icmp eq i32 %rem9, 0
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %for.body5
  %16 = load %struct._IO_FILE** @stderr, align 8
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %for.body5
  br label %for.inc14

for.inc14:                                        ; preds = %if.end13
  %17 = load i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond3

for.end16:                                        ; preds = %for.cond3
  %18 = load %struct._IO_FILE** @stderr, align 8
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind uwtable
define void @polybench_flush_cache() #0 {
entry:
  %cs = alloca i32, align 4
  %flush = alloca double*, align 8
  %i = alloca i32, align 4
  %tmp = alloca double, align 8
  store i32 4194560, i32* %cs, align 4
  %0 = load i32* %cs, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #6
  %1 = bitcast i8* %call to double*
  store double* %1, double** %flush, align 8
  store double 0.000000e+00, double* %tmp, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32* %i, align 4
  %3 = load i32* %cs, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load double** %flush, align 8
  %arrayidx = getelementptr inbounds double* %5, i64 %idxprom
  %6 = load double* %arrayidx, align 8
  %7 = load double* %tmp, align 8
  %add = fadd double %7, %6
  store double %add, double* %tmp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double* %tmp, align 8
  %cmp2 = fcmp ole double %9, 1.000000e+01
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  br label %cond.end

cond.false:                                       ; preds = %for.end
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8]* @.str3, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8]* @.str14, i32 0, i32 0), i32 97, i8* getelementptr inbounds ([29 x i8]* @__PRETTY_FUNCTION__.polybench_flush_cache, i32 0, i32 0)) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %10, %cond.true
  %11 = load double** %flush, align 8
  %12 = bitcast double* %11 to i8*
  call void @free(i8* %12) #6
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #2

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: nounwind uwtable
define void @polybench_prepare_instruments() #0 {
entry:
  call void @polybench_flush_cache()
  ret void
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_start() #0 {
entry:
  call void @polybench_prepare_instruments()
  %call = call double @rtclock()
  store double %call, double* @polybench_t_start, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_stop() #0 {
entry:
  %call = call double @rtclock()
  store double %call, double* @polybench_t_end, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_print() #0 {
entry:
  %0 = load double* @polybench_t_end, align 8
  %1 = load double* @polybench_t_start, align 8
  %sub = fsub double %0, %1
  %call = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0), double %sub)
  ret void
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define i8* @polybench_alloc_data(i32 %n, i32 %elt_size) #0 {
entry:
  %n.addr = alloca i32, align 4
  %elt_size.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %elt_size, i32* %elt_size.addr, align 4
  %0 = load i32* %n.addr, align 4
  %1 = load i32* %elt_size.addr, align 4
  %mul = mul nsw i32 %0, %1
  %conv = sext i32 %mul to i64
  %call = call i8* @xmalloc(i64 %conv)
  store i8* %call, i8** %ret, align 8
  %2 = load i8** %ret, align 8
  ret i8* %2
}

; Function Attrs: nounwind
declare i32 @posix_memalign(i8**, i64, i64) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind uwtable
define internal double @rtclock() #0 {
entry:
  ret double 0.000000e+00
}

; Function Attrs: nounwind uwtable
define internal i8* @xmalloc(i64 %num) #0 {
entry:
  %num.addr = alloca i64, align 8
  %new = alloca i8*, align 8
  %ret = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  store i8* null, i8** %new, align 8
  %0 = load i64* %num.addr, align 8
  %call = call i32 @posix_memalign(i8** %new, i64 32, i64 %0) #6
  store i32 %call, i32* %ret, align 4
  %1 = load i8** %new, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32* %ret, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([51 x i8]* @.str36, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8** %new, align 8
  ret i8* %4
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 3.6.0 (https://github.com/llvm-mirror/clang 64b6333290f9b7df5a25d4fba34611de3078a792) (llvm/ 0e9a38ba60be659d570af893e05c75b9f6cfe35d)"}
!1 = !{i32 2, !"Dwarf Version", i32 4}
!2 = !{i32 2, !"Debug Info Version", i32 2}
